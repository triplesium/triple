module;
#include <source_location>
#include <string_view>
#include <type_traits>
#include <typeinfo>

export module triple.refl:type_of;
import triple.base;
import :type;

namespace triple::refl {

template<class T>
consteval auto get_type_name_str_view() {
    // Unfortunately, we cannot avoid the use of a compiler-specific macro for
    // Clang on Windows. For all other compilers, function_name works as
    // intended.
#if defined(__clang__) && defined(_MSC_VER)
    const auto func_name = std::string_view {__PRETTY_FUNCTION__};
#else
    const auto func_name =
        std::string_view {std::source_location::current().function_name()};
#endif
#if defined(__clang__)
    const auto split = func_name.substr(0, func_name.size() - 1);
    return split.substr(split.find("T = ") + 4);
#elif defined(__GNUC__)
    const auto split = func_name.substr(0, func_name.size() - 1);
    return split.substr(split.find("T = ") + 4);
#elif defined(_MSC_VER)
    auto split = func_name.substr(0, func_name.size() - 7);
    split = split.substr(split.find("get_type_name_str_view<") + 23);
    auto pos = split.find(" ");
    if (pos != std::string_view::npos) {
        return split.substr(pos + 1);
    }
    return split;
#else
    static_assert(
        false,
        "You are using an unsupported compiler. Please use GCC, Clang "
        "or MSVC or explicitly tag your structs using 'Tag' or 'Name'."
    );
#endif
}

// Workaround for unable to use `static constexpr` in a `constexpr` function.
// Ref: https://stackoverflow.com/questions/62458079
template<class T>
struct TypeDataGetter {
    static constexpr TypeData ty =
        TypeData(get_type_name_str_view<T>(), sizeof(T));
};
template<>
struct TypeDataGetter<void> {
    static constexpr TypeData ty = TypeData("void", 0);
};

export template<class T>
constexpr Type type() {
    return Type {TypeDataGetter<T>::ty};
}

template<typename T>
struct remove_qualifiers : std::type_identity<T> {};
template<typename T>
struct remove_qualifiers<T const> : remove_qualifiers<T> {};
template<typename T>
struct remove_qualifiers<T volatile> : remove_qualifiers<T> {};
template<typename T>
struct remove_qualifiers<T const volatile> : remove_qualifiers<T> {};
template<typename T>
struct remove_qualifiers<T&> : remove_qualifiers<T> {};
template<typename T>
struct remove_qualifiers<T&&> : remove_qualifiers<T> {};
template<typename T>
struct remove_qualifiers<T*> : remove_qualifiers<T> {};

template<typename T>
using raw_type = typename remove_qualifiers<T>::type;

export template<typename T>
Type type_of(T&&) {
    return type<raw_type<T>>();
}

} // namespace triple::refl
